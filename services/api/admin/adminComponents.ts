/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useAdminContext, AdminContext } from "./adminContext";
import type * as Fetcher from "./adminFetcher";
import { adminFetch } from "./adminFetcher";
import type * as Schemas from "./adminSchemas";

export type AuthControllerLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerLoginVariables = {
  body: Schemas.LoginDto;
} & AdminContext["fetcherOptions"];

export const fetchAuthControllerLogin = (
  variables: AuthControllerLoginVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.JwtTokenDto,
    AuthControllerLoginError,
    Schemas.LoginDto,
    {},
    {},
    {}
  >({ url: "/api/v1/auth/login", method: "post", ...variables, signal });

export const useAuthControllerLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.JwtTokenDto,
      AuthControllerLoginError,
      AuthControllerLoginVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.JwtTokenDto,
    AuthControllerLoginError,
    AuthControllerLoginVariables
  >(
    (variables: AuthControllerLoginVariables) =>
      fetchAuthControllerLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerForgotPasswordError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerForgotPasswordVariables = {
  body: Schemas.ForgotPasswordDto;
} & AdminContext["fetcherOptions"];

export const fetchAuthControllerForgotPassword = (
  variables: AuthControllerForgotPasswordVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    boolean,
    AuthControllerForgotPasswordError,
    Schemas.ForgotPasswordDto,
    {},
    {},
    {}
  >({
    url: "/api/v1/auth/password/forgot",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthControllerForgotPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      boolean,
      AuthControllerForgotPasswordError,
      AuthControllerForgotPasswordVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    boolean,
    AuthControllerForgotPasswordError,
    AuthControllerForgotPasswordVariables
  >(
    (variables: AuthControllerForgotPasswordVariables) =>
      fetchAuthControllerForgotPassword({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerResetPasswordError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerResetPasswordVariables = {
  body: Schemas.ResetPasswordDto;
} & AdminContext["fetcherOptions"];

export const fetchAuthControllerResetPassword = (
  variables: AuthControllerResetPasswordVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    boolean,
    AuthControllerResetPasswordError,
    Schemas.ResetPasswordDto,
    {},
    {},
    {}
  >({
    url: "/api/v1/auth/password/reset",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthControllerResetPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      boolean,
      AuthControllerResetPasswordError,
      AuthControllerResetPasswordVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    boolean,
    AuthControllerResetPasswordError,
    AuthControllerResetPasswordVariables
  >(
    (variables: AuthControllerResetPasswordVariables) =>
      fetchAuthControllerResetPassword({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerChangePasswordError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerChangePasswordVariables = {
  body: Schemas.ChangePasswordDto;
} & AdminContext["fetcherOptions"];

export const fetchAuthControllerChangePassword = (
  variables: AuthControllerChangePasswordVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    boolean,
    AuthControllerChangePasswordError,
    Schemas.ChangePasswordDto,
    {},
    {},
    {}
  >({
    url: "/api/v1/auth/password/change",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthControllerChangePassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      boolean,
      AuthControllerChangePasswordError,
      AuthControllerChangePasswordVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    boolean,
    AuthControllerChangePasswordError,
    AuthControllerChangePasswordVariables
  >(
    (variables: AuthControllerChangePasswordVariables) =>
      fetchAuthControllerChangePassword({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerConfirmInvitePathParams = {
  code: string;
};

export type AuthControllerConfirmInviteError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerConfirmInviteVariables = {
  body: Schemas.RegisterDto;
  pathParams: AuthControllerConfirmInvitePathParams;
} & AdminContext["fetcherOptions"];

export const fetchAuthControllerConfirmInvite = (
  variables: AuthControllerConfirmInviteVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.UserDto,
    AuthControllerConfirmInviteError,
    Schemas.RegisterDto,
    {},
    {},
    AuthControllerConfirmInvitePathParams
  >({
    url: "/api/v1/auth/confirm-invite/{code}",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthControllerConfirmInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserDto,
      AuthControllerConfirmInviteError,
      AuthControllerConfirmInviteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.UserDto,
    AuthControllerConfirmInviteError,
    AuthControllerConfirmInviteVariables
  >(
    (variables: AuthControllerConfirmInviteVariables) =>
      fetchAuthControllerConfirmInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerVerifySuiUserError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerVerifySuiUserVariables = {
  body: Schemas.VerifySuiUserDto;
} & AdminContext["fetcherOptions"];

export const fetchAuthControllerVerifySuiUser = (
  variables: AuthControllerVerifySuiUserVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.JwtTokenDto,
    AuthControllerVerifySuiUserError,
    Schemas.VerifySuiUserDto,
    {},
    {},
    {}
  >({
    url: "/api/v1/auth/verify-sui-user",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthControllerVerifySuiUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.JwtTokenDto,
      AuthControllerVerifySuiUserError,
      AuthControllerVerifySuiUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.JwtTokenDto,
    AuthControllerVerifySuiUserError,
    AuthControllerVerifySuiUserVariables
  >(
    (variables: AuthControllerVerifySuiUserVariables) =>
      fetchAuthControllerVerifySuiUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GoogleControllerGoogleAuthError = Fetcher.ErrorWrapper<undefined>;

export type GoogleControllerGoogleAuthVariables =
  AdminContext["fetcherOptions"];

export const fetchGoogleControllerGoogleAuth = (
  variables: GoogleControllerGoogleAuthVariables,
  signal?: AbortSignal
) =>
  adminFetch<undefined, GoogleControllerGoogleAuthError, undefined, {}, {}, {}>(
    {
      url: "/api/v1/google/sign-in-backend",
      method: "get",
      ...variables,
      signal,
    }
  );

export const useGoogleControllerGoogleAuth = <TData = undefined>(
  variables: GoogleControllerGoogleAuthVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      GoogleControllerGoogleAuthError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<undefined, GoogleControllerGoogleAuthError, TData>(
    queryKeyFn({
      path: "/api/v1/google/sign-in-backend",
      operationId: "googleControllerGoogleAuth",
      variables,
    }),
    ({ signal }) =>
      fetchGoogleControllerGoogleAuth(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GoogleControllerAuthenticateError = Fetcher.ErrorWrapper<undefined>;

export type GoogleControllerAuthenticateVariables = {
  body: Schemas.GoogleVerificationDto;
} & AdminContext["fetcherOptions"];

export const fetchGoogleControllerAuthenticate = (
  variables: GoogleControllerAuthenticateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    undefined,
    GoogleControllerAuthenticateError,
    Schemas.GoogleVerificationDto,
    {},
    {},
    {}
  >({ url: "/api/v1/google/auth", method: "post", ...variables, signal });

export const useGoogleControllerAuthenticate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GoogleControllerAuthenticateError,
      GoogleControllerAuthenticateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    undefined,
    GoogleControllerAuthenticateError,
    GoogleControllerAuthenticateVariables
  >(
    (variables: GoogleControllerAuthenticateVariables) =>
      fetchGoogleControllerAuthenticate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AdminControllerFindMeError = Fetcher.ErrorWrapper<undefined>;

export type AdminControllerFindMeVariables = AdminContext["fetcherOptions"];

export const fetchAdminControllerFindMe = (
  variables: AdminControllerFindMeVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.UserDto,
    AdminControllerFindMeError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/admin/me", method: "get", ...variables, signal });

export const useAdminControllerFindMe = <TData = Schemas.UserDto>(
  variables: AdminControllerFindMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserDto,
      AdminControllerFindMeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.UserDto,
    AdminControllerFindMeError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/admin/me",
      operationId: "adminControllerFindMe",
      variables,
    }),
    ({ signal }) =>
      fetchAdminControllerFindMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerCreateVariables = {
  body: Schemas.CreateCampaingDto;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerCreate = (
  variables: CampaignControllerCreateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerCreateError,
    Schemas.CreateCampaingDto,
    {},
    {},
    {}
  >({ url: "/api/v1/campaign", method: "post", ...variables, signal });

export const useCampaignControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CampaignDto,
      CampaignControllerCreateError,
      CampaignControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.CampaignDto,
    CampaignControllerCreateError,
    CampaignControllerCreateVariables
  >(
    (variables: CampaignControllerCreateVariables) =>
      fetchCampaignControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CampaignControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type CampaignControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.CampaignDto[];
};

export type CampaignControllerFindAllVariables = {
  queryParams?: CampaignControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerFindAll = (
  variables: CampaignControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    CampaignControllerFindAllResponse,
    CampaignControllerFindAllError,
    undefined,
    {},
    CampaignControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/campaign", method: "get", ...variables, signal });

export const useCampaignControllerFindAll = <
  TData = CampaignControllerFindAllResponse
>(
  variables: CampaignControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CampaignControllerFindAllResponse,
      CampaignControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    CampaignControllerFindAllResponse,
    CampaignControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign",
      operationId: "campaignControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignControllerFindOnePathParams = {
  id: string;
};

export type CampaignControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerFindOneVariables = {
  pathParams: CampaignControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerFindOne = (
  variables: CampaignControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerFindOneError,
    undefined,
    {},
    {},
    CampaignControllerFindOnePathParams
  >({ url: "/api/v1/campaign/{id}", method: "get", ...variables, signal });

export const useCampaignControllerFindOne = <TData = Schemas.CampaignDto>(
  variables: CampaignControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CampaignDto,
      CampaignControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.CampaignDto,
    CampaignControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign/{id}",
      operationId: "campaignControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignControllerUpdatePathParams = {
  id: string;
};

export type CampaignControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerUpdateVariables = {
  body: Schemas.UpdateCampaignDto;
  pathParams: CampaignControllerUpdatePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerUpdate = (
  variables: CampaignControllerUpdateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    CampaignControllerUpdateError,
    Schemas.UpdateCampaignDto,
    {},
    {},
    CampaignControllerUpdatePathParams
  >({ url: "/api/v1/campaign/{id}", method: "patch", ...variables, signal });

export const useCampaignControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      CampaignControllerUpdateError,
      CampaignControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    CampaignControllerUpdateError,
    CampaignControllerUpdateVariables
  >(
    (variables: CampaignControllerUpdateVariables) =>
      fetchCampaignControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CampaignControllerRemovePathParams = {
  id: string;
};

export type CampaignControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerRemoveVariables = {
  pathParams: CampaignControllerRemovePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerRemove = (
  variables: CampaignControllerRemoveVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    CampaignControllerRemoveError,
    undefined,
    {},
    {},
    CampaignControllerRemovePathParams
  >({ url: "/api/v1/campaign/{id}", method: "delete", ...variables, signal });

export const useCampaignControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      CampaignControllerRemoveError,
      CampaignControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    CampaignControllerRemoveError,
    CampaignControllerRemoveVariables
  >(
    (variables: CampaignControllerRemoveVariables) =>
      fetchCampaignControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CampaignControllerPausePathParams = {
  id: string;
};

export type CampaignControllerPauseError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerPauseVariables = {
  body: Schemas.CampaignStatusDto;
  pathParams: CampaignControllerPausePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerPause = (
  variables: CampaignControllerPauseVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerPauseError,
    Schemas.CampaignStatusDto,
    {},
    {},
    CampaignControllerPausePathParams
  >({
    url: "/api/v1/campaign/change-status/{id}",
    method: "patch",
    ...variables,
    signal,
  });

export const useCampaignControllerPause = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CampaignDto,
      CampaignControllerPauseError,
      CampaignControllerPauseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.CampaignDto,
    CampaignControllerPauseError,
    CampaignControllerPauseVariables
  >(
    (variables: CampaignControllerPauseVariables) =>
      fetchCampaignControllerPause({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CampaignControllerChangePaymentTypePathParams = {
  id: string;
};

export type CampaignControllerChangePaymentTypeError =
  Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerChangePaymentTypeVariables = {
  body: Schemas.ChangePaymentTypeDto;
  pathParams: CampaignControllerChangePaymentTypePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerChangePaymentType = (
  variables: CampaignControllerChangePaymentTypeVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerChangePaymentTypeError,
    Schemas.ChangePaymentTypeDto,
    {},
    {},
    CampaignControllerChangePaymentTypePathParams
  >({
    url: "/api/v1/campaign/payment-type/{id}",
    method: "patch",
    ...variables,
    signal,
  });

export const useCampaignControllerChangePaymentType = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CampaignDto,
      CampaignControllerChangePaymentTypeError,
      CampaignControllerChangePaymentTypeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.CampaignDto,
    CampaignControllerChangePaymentTypeError,
    CampaignControllerChangePaymentTypeVariables
  >(
    (variables: CampaignControllerChangePaymentTypeVariables) =>
      fetchCampaignControllerChangePaymentType({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type CampaignControllerExportReportPathParams = {
  id: string;
};

export type CampaignControllerExportReportError =
  Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerExportReportVariables = {
  pathParams: CampaignControllerExportReportPathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerExportReport = (
  variables: CampaignControllerExportReportVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerExportReportError,
    undefined,
    {},
    {},
    CampaignControllerExportReportPathParams
  >({
    url: "/api/v1/campaign/export-report/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useCampaignControllerExportReport = <TData = Schemas.CampaignDto>(
  variables: CampaignControllerExportReportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CampaignDto,
      CampaignControllerExportReportError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.CampaignDto,
    CampaignControllerExportReportError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign/export-report/{id}",
      operationId: "campaignControllerExportReport",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignControllerExportReport(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type FileControllerUploadFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUploadFileRequestBody = {
  /**
   * @format binary
   */
  file: Blob;
  tags?: string[] | null;
};

export type FileControllerUploadFileVariables = {
  body: FileControllerUploadFileRequestBody;
} & AdminContext["fetcherOptions"];

export const fetchFileControllerUploadFile = (
  variables: FileControllerUploadFileVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.FileDto,
    FileControllerUploadFileError,
    FileControllerUploadFileRequestBody,
    {},
    {},
    {}
  >({ url: "/api/v1/file", method: "post", ...variables, signal });

export const useFileControllerUploadFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileDto,
      FileControllerUploadFileError,
      FileControllerUploadFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.FileDto,
    FileControllerUploadFileError,
    FileControllerUploadFileVariables
  >(
    (variables: FileControllerUploadFileVariables) =>
      fetchFileControllerUploadFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerUpdateFilePathParams = {
  id: string;
};

export type FileControllerUpdateFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUpdateFileRequestBody = {
  /**
   * @format binary
   */
  file: Blob;
  tags?: string[] | null;
};

export type FileControllerUpdateFileVariables = {
  body: FileControllerUpdateFileRequestBody;
  pathParams: FileControllerUpdateFilePathParams;
} & AdminContext["fetcherOptions"];

export const fetchFileControllerUpdateFile = (
  variables: FileControllerUpdateFileVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.FileDto,
    FileControllerUpdateFileError,
    FileControllerUpdateFileRequestBody,
    {},
    {},
    FileControllerUpdateFilePathParams
  >({ url: "/api/v1/file/{id}", method: "patch", ...variables, signal });

export const useFileControllerUpdateFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileDto,
      FileControllerUpdateFileError,
      FileControllerUpdateFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.FileDto,
    FileControllerUpdateFileError,
    FileControllerUpdateFileVariables
  >(
    (variables: FileControllerUpdateFileVariables) =>
      fetchFileControllerUpdateFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerRemovePathParams = {
  id: string;
};

export type FileControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerRemoveVariables = {
  pathParams: FileControllerRemovePathParams;
} & AdminContext["fetcherOptions"];

export const fetchFileControllerRemove = (
  variables: FileControllerRemoveVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    FileControllerRemoveError,
    undefined,
    {},
    {},
    FileControllerRemovePathParams
  >({ url: "/api/v1/file/{id}", method: "delete", ...variables, signal });

export const useFileControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      FileControllerRemoveError,
      FileControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    FileControllerRemoveError,
    FileControllerRemoveVariables
  >(
    (variables: FileControllerRemoveVariables) =>
      fetchFileControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChainControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type ChainControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ChainControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.ChainDto[];
};

export type ChainControllerFindAllVariables = {
  queryParams?: ChainControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchChainControllerFindAll = (
  variables: ChainControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    ChainControllerFindAllResponse,
    ChainControllerFindAllError,
    undefined,
    {},
    ChainControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/chain", method: "get", ...variables, signal });

export const useChainControllerFindAll = <
  TData = ChainControllerFindAllResponse
>(
  variables: ChainControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChainControllerFindAllResponse,
      ChainControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    ChainControllerFindAllResponse,
    ChainControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/chain",
      operationId: "chainControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchChainControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChainControllerFindOnePathParams = {
  id: string;
};

export type ChainControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ChainControllerFindOneVariables = {
  pathParams: ChainControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchChainControllerFindOne = (
  variables: ChainControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.ChainDto,
    ChainControllerFindOneError,
    undefined,
    {},
    {},
    ChainControllerFindOnePathParams
  >({ url: "/api/v1/chain/{id}", method: "get", ...variables, signal });

export const useChainControllerFindOne = <TData = Schemas.ChainDto>(
  variables: ChainControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ChainDto,
      ChainControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.ChainDto,
    ChainControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/chain/{id}",
      operationId: "chainControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchChainControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type NftTypeControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type NftTypeControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type NftTypeControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.NftTypeDto[];
};

export type NftTypeControllerFindAllVariables = {
  queryParams?: NftTypeControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchNftTypeControllerFindAll = (
  variables: NftTypeControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    NftTypeControllerFindAllResponse,
    NftTypeControllerFindAllError,
    undefined,
    {},
    NftTypeControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/nft-type", method: "get", ...variables, signal });

export const useNftTypeControllerFindAll = <
  TData = NftTypeControllerFindAllResponse
>(
  variables: NftTypeControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      NftTypeControllerFindAllResponse,
      NftTypeControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    NftTypeControllerFindAllResponse,
    NftTypeControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/nft-type",
      operationId: "nftTypeControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchNftTypeControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type NftTypeControllerFindOnePathParams = {
  id: string;
};

export type NftTypeControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type NftTypeControllerFindOneVariables = {
  pathParams: NftTypeControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchNftTypeControllerFindOne = (
  variables: NftTypeControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.NftTypeDto,
    NftTypeControllerFindOneError,
    undefined,
    {},
    {},
    NftTypeControllerFindOnePathParams
  >({ url: "/api/v1/nft-type/{id}", method: "get", ...variables, signal });

export const useNftTypeControllerFindOne = <TData = Schemas.NftTypeDto>(
  variables: NftTypeControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.NftTypeDto,
      NftTypeControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.NftTypeDto,
    NftTypeControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/nft-type/{id}",
      operationId: "nftTypeControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchNftTypeControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignTypeControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type CampaignTypeControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export type CampaignTypeControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.CampaignTypeDto[];
};

export type CampaignTypeControllerFindAllVariables = {
  queryParams?: CampaignTypeControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignTypeControllerFindAll = (
  variables: CampaignTypeControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    CampaignTypeControllerFindAllResponse,
    CampaignTypeControllerFindAllError,
    undefined,
    {},
    CampaignTypeControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/campaign-type", method: "get", ...variables, signal });

export const useCampaignTypeControllerFindAll = <
  TData = CampaignTypeControllerFindAllResponse
>(
  variables: CampaignTypeControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CampaignTypeControllerFindAllResponse,
      CampaignTypeControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    CampaignTypeControllerFindAllResponse,
    CampaignTypeControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign-type",
      operationId: "campaignTypeControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignTypeControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignTypeControllerFindOnePathParams = {
  id: string;
};

export type CampaignTypeControllerFindOneError =
  Fetcher.ErrorWrapper<undefined>;

export type CampaignTypeControllerFindOneVariables = {
  pathParams: CampaignTypeControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignTypeControllerFindOne = (
  variables: CampaignTypeControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignTypeDto,
    CampaignTypeControllerFindOneError,
    undefined,
    {},
    {},
    CampaignTypeControllerFindOnePathParams
  >({ url: "/api/v1/campaign-type/{id}", method: "get", ...variables, signal });

export const useCampaignTypeControllerFindOne = <
  TData = Schemas.CampaignTypeDto
>(
  variables: CampaignTypeControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CampaignTypeDto,
      CampaignTypeControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.CampaignTypeDto,
    CampaignTypeControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign-type/{id}",
      operationId: "campaignTypeControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignTypeControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrganizationControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerCreateVariables = {
  body: Schemas.CreateOrganizationDto;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerCreate = (
  variables: OrganizationControllerCreateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.OrganizationDto,
    OrganizationControllerCreateError,
    Schemas.CreateOrganizationDto,
    {},
    {},
    {}
  >({ url: "/api/v1/organization", method: "post", ...variables, signal });

export const useOrganizationControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganizationDto,
      OrganizationControllerCreateError,
      OrganizationControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.OrganizationDto,
    OrganizationControllerCreateError,
    OrganizationControllerCreateVariables
  >(
    (variables: OrganizationControllerCreateVariables) =>
      fetchOrganizationControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrganizationControllerFindOnePathParams = {
  id: string;
};

export type OrganizationControllerFindOneError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerFindOneVariables = {
  pathParams: OrganizationControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerFindOne = (
  variables: OrganizationControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.OrganizationDto,
    OrganizationControllerFindOneError,
    undefined,
    {},
    {},
    OrganizationControllerFindOnePathParams
  >({
    url: "/api/v1/organization/entity/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useOrganizationControllerFindOne = <
  TData = Schemas.OrganizationDto
>(
  variables: OrganizationControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationDto,
      OrganizationControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.OrganizationDto,
    OrganizationControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/organization/entity/{id}",
      operationId: "organizationControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchOrganizationControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrganizationControllerUpdatePathParams = {
  id: string;
};

export type OrganizationControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerUpdateVariables = {
  body?: Schemas.UpdateOrganizationDto;
  pathParams: OrganizationControllerUpdatePathParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerUpdate = (
  variables: OrganizationControllerUpdateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    OrganizationControllerUpdateError,
    Schemas.UpdateOrganizationDto,
    {},
    {},
    OrganizationControllerUpdatePathParams
  >({
    url: "/api/v1/organization/entity/{id}",
    method: "patch",
    ...variables,
    signal,
  });

export const useOrganizationControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      OrganizationControllerUpdateError,
      OrganizationControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    OrganizationControllerUpdateError,
    OrganizationControllerUpdateVariables
  >(
    (variables: OrganizationControllerUpdateVariables) =>
      fetchOrganizationControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrganizationControllerFindOneUserPathParams = {
  id: string;
};

export type OrganizationControllerFindOneUserError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerFindOneUserVariables = {
  pathParams: OrganizationControllerFindOneUserPathParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerFindOneUser = (
  variables: OrganizationControllerFindOneUserVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.UserDto,
    OrganizationControllerFindOneUserError,
    undefined,
    {},
    {},
    OrganizationControllerFindOneUserPathParams
  >({
    url: "/api/v1/organization/users/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useOrganizationControllerFindOneUser = <TData = Schemas.UserDto>(
  variables: OrganizationControllerFindOneUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserDto,
      OrganizationControllerFindOneUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.UserDto,
    OrganizationControllerFindOneUserError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/organization/users/{id}",
      operationId: "organizationControllerFindOneUser",
      variables,
    }),
    ({ signal }) =>
      fetchOrganizationControllerFindOneUser(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrganizationControllerFindAllQueryParams = {
  email?: string;
  offset?: number;
  limit?: number;
};

export type OrganizationControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.UserDto[];
};

export type OrganizationControllerFindAllVariables = {
  queryParams?: OrganizationControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerFindAll = (
  variables: OrganizationControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    OrganizationControllerFindAllResponse,
    OrganizationControllerFindAllError,
    undefined,
    {},
    OrganizationControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/organization/users", method: "get", ...variables, signal });

export const useOrganizationControllerFindAll = <
  TData = OrganizationControllerFindAllResponse
>(
  variables: OrganizationControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrganizationControllerFindAllResponse,
      OrganizationControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    OrganizationControllerFindAllResponse,
    OrganizationControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/organization/users",
      operationId: "organizationControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchOrganizationControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrganizationControllerFindAllInvoicesQueryParams = {
  offset?: string;
  limit?: string;
};

export type OrganizationControllerFindAllInvoicesError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerFindAllInvoicesResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.OrganizationInvoiceDto[];
};

export type OrganizationControllerFindAllInvoicesVariables = {
  queryParams?: OrganizationControllerFindAllInvoicesQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerFindAllInvoices = (
  variables: OrganizationControllerFindAllInvoicesVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    OrganizationControllerFindAllInvoicesResponse,
    OrganizationControllerFindAllInvoicesError,
    undefined,
    {},
    OrganizationControllerFindAllInvoicesQueryParams,
    {}
  >({
    url: "/api/v1/organization/invoices",
    method: "get",
    ...variables,
    signal,
  });

export const useOrganizationControllerFindAllInvoices = <
  TData = OrganizationControllerFindAllInvoicesResponse
>(
  variables: OrganizationControllerFindAllInvoicesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrganizationControllerFindAllInvoicesResponse,
      OrganizationControllerFindAllInvoicesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    OrganizationControllerFindAllInvoicesResponse,
    OrganizationControllerFindAllInvoicesError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/organization/invoices",
      operationId: "organizationControllerFindAllInvoices",
      variables,
    }),
    ({ signal }) =>
      fetchOrganizationControllerFindAllInvoices(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrganizationControllerResendInvitePathParams = {
  email: string;
};

export type OrganizationControllerResendInviteError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerResendInviteVariables = {
  pathParams: OrganizationControllerResendInvitePathParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerResendInvite = (
  variables: OrganizationControllerResendInviteVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    boolean,
    OrganizationControllerResendInviteError,
    undefined,
    {},
    {},
    OrganizationControllerResendInvitePathParams
  >({
    url: "/api/v1/organization/resend-invite/{email}",
    method: "post",
    ...variables,
    signal,
  });

export const useOrganizationControllerResendInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      boolean,
      OrganizationControllerResendInviteError,
      OrganizationControllerResendInviteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    boolean,
    OrganizationControllerResendInviteError,
    OrganizationControllerResendInviteVariables
  >(
    (variables: OrganizationControllerResendInviteVariables) =>
      fetchOrganizationControllerResendInvite({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrganizationControllerInvitePathParams = {
  email: string;
};

export type OrganizationControllerInviteError = Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerInviteVariables = {
  body: Schemas.InviteUserDto;
  pathParams: OrganizationControllerInvitePathParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerInvite = (
  variables: OrganizationControllerInviteVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    boolean,
    OrganizationControllerInviteError,
    Schemas.InviteUserDto,
    {},
    {},
    OrganizationControllerInvitePathParams
  >({
    url: "/api/v1/organization/invite/{email}",
    method: "post",
    ...variables,
    signal,
  });

export const useOrganizationControllerInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      boolean,
      OrganizationControllerInviteError,
      OrganizationControllerInviteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    boolean,
    OrganizationControllerInviteError,
    OrganizationControllerInviteVariables
  >(
    (variables: OrganizationControllerInviteVariables) =>
      fetchOrganizationControllerInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrganizationControllerRemovePathParams = {
  userId: string;
};

export type OrganizationControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type OrganizationControllerRemoveVariables = {
  pathParams: OrganizationControllerRemovePathParams;
} & AdminContext["fetcherOptions"];

export const fetchOrganizationControllerRemove = (
  variables: OrganizationControllerRemoveVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    OrganizationControllerRemoveError,
    undefined,
    {},
    {},
    OrganizationControllerRemovePathParams
  >({
    url: "/api/v1/organization/remove-user/{userId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useOrganizationControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      OrganizationControllerRemoveError,
      OrganizationControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    OrganizationControllerRemoveError,
    OrganizationControllerRemoveVariables
  >(
    (variables: OrganizationControllerRemoveVariables) =>
      fetchOrganizationControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrderControllerPreviewOrderPathParams = {
  campaignId: string;
};

export type OrderControllerPreviewOrderError = Fetcher.ErrorWrapper<undefined>;

export type OrderControllerPreviewOrderVariables = {
  pathParams: OrderControllerPreviewOrderPathParams;
} & AdminContext["fetcherOptions"];

export const fetchOrderControllerPreviewOrder = (
  variables: OrderControllerPreviewOrderVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignCostDto,
    OrderControllerPreviewOrderError,
    undefined,
    {},
    {},
    OrderControllerPreviewOrderPathParams
  >({
    url: "/api/v1/order/calculate-order-price/{campaignId}",
    method: "get",
    ...variables,
    signal,
  });

export const useOrderControllerPreviewOrder = <TData = Schemas.CampaignCostDto>(
  variables: OrderControllerPreviewOrderVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CampaignCostDto,
      OrderControllerPreviewOrderError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.CampaignCostDto,
    OrderControllerPreviewOrderError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/order/calculate-order-price/{campaign_id}",
      operationId: "orderControllerPreviewOrder",
      variables,
    }),
    ({ signal }) =>
      fetchOrderControllerPreviewOrder(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrderControllerCreateOrderError = Fetcher.ErrorWrapper<undefined>;

export type OrderControllerCreateOrderVariables = {
  body: Schemas.CampaignOrderRequestDto;
} & AdminContext["fetcherOptions"];

export const fetchOrderControllerCreateOrder = (
  variables: OrderControllerCreateOrderVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignOrderDto,
    OrderControllerCreateOrderError,
    Schemas.CampaignOrderRequestDto,
    {},
    {},
    {}
  >({
    url: "/api/v1/order/create-order",
    method: "post",
    ...variables,
    signal,
  });

export const useOrderControllerCreateOrder = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CampaignOrderDto,
      OrderControllerCreateOrderError,
      OrderControllerCreateOrderVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.CampaignOrderDto,
    OrderControllerCreateOrderError,
    OrderControllerCreateOrderVariables
  >(
    (variables: OrderControllerCreateOrderVariables) =>
      fetchOrderControllerCreateOrder({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrderControllerFindAllCampaignOrdersQueryParams = {
  offset?: string;
  limit?: string;
};

export type OrderControllerFindAllCampaignOrdersError =
  Fetcher.ErrorWrapper<undefined>;

export type OrderControllerFindAllCampaignOrdersResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.CampaignOrderDto[];
};

export type OrderControllerFindAllCampaignOrdersVariables = {
  queryParams?: OrderControllerFindAllCampaignOrdersQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchOrderControllerFindAllCampaignOrders = (
  variables: OrderControllerFindAllCampaignOrdersVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    OrderControllerFindAllCampaignOrdersResponse,
    OrderControllerFindAllCampaignOrdersError,
    undefined,
    {},
    OrderControllerFindAllCampaignOrdersQueryParams,
    {}
  >({ url: "/api/v1/order", method: "get", ...variables, signal });

export const useOrderControllerFindAllCampaignOrders = <
  TData = OrderControllerFindAllCampaignOrdersResponse
>(
  variables: OrderControllerFindAllCampaignOrdersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrderControllerFindAllCampaignOrdersResponse,
      OrderControllerFindAllCampaignOrdersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    OrderControllerFindAllCampaignOrdersResponse,
    OrderControllerFindAllCampaignOrdersError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/order",
      operationId: "orderControllerFindAllCampaignOrders",
      variables,
    }),
    ({ signal }) =>
      fetchOrderControllerFindAllCampaignOrders(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type StripeControllerGetProductPathParams = {
  id: string;
};

export type StripeControllerGetProductError = Fetcher.ErrorWrapper<undefined>;

export type StripeControllerGetProductVariables = {
  pathParams: StripeControllerGetProductPathParams;
} & AdminContext["fetcherOptions"];

export const fetchStripeControllerGetProduct = (
  variables: StripeControllerGetProductVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.ProductDto,
    StripeControllerGetProductError,
    undefined,
    {},
    {},
    StripeControllerGetProductPathParams
  >({
    url: "/api/v1/stripe/products/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useStripeControllerGetProduct = <TData = Schemas.ProductDto>(
  variables: StripeControllerGetProductVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProductDto,
      StripeControllerGetProductError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.ProductDto,
    StripeControllerGetProductError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/stripe/products/{id}",
      operationId: "stripeControllerGetProduct",
      variables,
    }),
    ({ signal }) =>
      fetchStripeControllerGetProduct(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type StripeControllerGetProductsError = Fetcher.ErrorWrapper<undefined>;

export type StripeControllerGetProductsResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.ProductDto[];
};

export type StripeControllerGetProductsVariables =
  AdminContext["fetcherOptions"];

export const fetchStripeControllerGetProducts = (
  variables: StripeControllerGetProductsVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    StripeControllerGetProductsResponse,
    StripeControllerGetProductsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/stripe/products", method: "get", ...variables, signal });

export const useStripeControllerGetProducts = <
  TData = StripeControllerGetProductsResponse
>(
  variables: StripeControllerGetProductsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      StripeControllerGetProductsResponse,
      StripeControllerGetProductsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    StripeControllerGetProductsResponse,
    StripeControllerGetProductsError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/stripe/products",
      operationId: "stripeControllerGetProducts",
      variables,
    }),
    ({ signal }) =>
      fetchStripeControllerGetProducts(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type StripeControllerChargeCapturedError =
  Fetcher.ErrorWrapper<undefined>;

export type StripeControllerChargeCapturedVariables =
  AdminContext["fetcherOptions"];

export const fetchStripeControllerChargeCaptured = (
  variables: StripeControllerChargeCapturedVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    undefined,
    StripeControllerChargeCapturedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/stripe/webhook", method: "post", ...variables, signal });

export const useStripeControllerChargeCaptured = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      StripeControllerChargeCapturedError,
      StripeControllerChargeCapturedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    undefined,
    StripeControllerChargeCapturedError,
    StripeControllerChargeCapturedVariables
  >(
    (variables: StripeControllerChargeCapturedVariables) =>
      fetchStripeControllerChargeCaptured({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/api/v1/google/sign-in-backend";
      operationId: "googleControllerGoogleAuth";
      variables: GoogleControllerGoogleAuthVariables;
    }
  | {
      path: "/api/v1/admin/me";
      operationId: "adminControllerFindMe";
      variables: AdminControllerFindMeVariables;
    }
  | {
      path: "/api/v1/campaign";
      operationId: "campaignControllerFindAll";
      variables: CampaignControllerFindAllVariables;
    }
  | {
      path: "/api/v1/campaign/{id}";
      operationId: "campaignControllerFindOne";
      variables: CampaignControllerFindOneVariables;
    }
  | {
      path: "/api/v1/campaign/export-report/{id}";
      operationId: "campaignControllerExportReport";
      variables: CampaignControllerExportReportVariables;
    }
  | {
      path: "/api/v1/chain";
      operationId: "chainControllerFindAll";
      variables: ChainControllerFindAllVariables;
    }
  | {
      path: "/api/v1/chain/{id}";
      operationId: "chainControllerFindOne";
      variables: ChainControllerFindOneVariables;
    }
  | {
      path: "/api/v1/nft-type";
      operationId: "nftTypeControllerFindAll";
      variables: NftTypeControllerFindAllVariables;
    }
  | {
      path: "/api/v1/nft-type/{id}";
      operationId: "nftTypeControllerFindOne";
      variables: NftTypeControllerFindOneVariables;
    }
  | {
      path: "/api/v1/campaign-type";
      operationId: "campaignTypeControllerFindAll";
      variables: CampaignTypeControllerFindAllVariables;
    }
  | {
      path: "/api/v1/campaign-type/{id}";
      operationId: "campaignTypeControllerFindOne";
      variables: CampaignTypeControllerFindOneVariables;
    }
  | {
      path: "/api/v1/organization/entity/{id}";
      operationId: "organizationControllerFindOne";
      variables: OrganizationControllerFindOneVariables;
    }
  | {
      path: "/api/v1/organization/users/{id}";
      operationId: "organizationControllerFindOneUser";
      variables: OrganizationControllerFindOneUserVariables;
    }
  | {
      path: "/api/v1/organization/users";
      operationId: "organizationControllerFindAll";
      variables: OrganizationControllerFindAllVariables;
    }
  | {
      path: "/api/v1/organization/invoices";
      operationId: "organizationControllerFindAllInvoices";
      variables: OrganizationControllerFindAllInvoicesVariables;
    }
  | {
      path: "/api/v1/order/calculate-order-price/{campaign_id}";
      operationId: "orderControllerPreviewOrder";
      variables: OrderControllerPreviewOrderVariables;
    }
  | {
      path: "/api/v1/order";
      operationId: "orderControllerFindAllCampaignOrders";
      variables: OrderControllerFindAllCampaignOrdersVariables;
    }
  | {
      path: "/api/v1/stripe/products/{id}";
      operationId: "stripeControllerGetProduct";
      variables: StripeControllerGetProductVariables;
    }
  | {
      path: "/api/v1/stripe/products";
      operationId: "stripeControllerGetProducts";
      variables: StripeControllerGetProductsVariables;
    };
