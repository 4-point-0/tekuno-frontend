/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useAdminContext, AdminContext } from "./adminContext";
import type * as Fetcher from "./adminFetcher";
import { adminFetch } from "./adminFetcher";
import type * as Schemas from "./adminSchemas";

export type GoogleControllerGoogleAuthError = Fetcher.ErrorWrapper<undefined>;

export type GoogleControllerGoogleAuthVariables =
  AdminContext["fetcherOptions"];

export const fetchGoogleControllerGoogleAuth = (
  variables: GoogleControllerGoogleAuthVariables,
  signal?: AbortSignal
) =>
  adminFetch<undefined, GoogleControllerGoogleAuthError, undefined, {}, {}, {}>(
    {
      url: "/api/v1/google/sign-in-backend",
      method: "get",
      ...variables,
      signal,
    }
  );

export const useGoogleControllerGoogleAuth = <TData = undefined>(
  variables: GoogleControllerGoogleAuthVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      GoogleControllerGoogleAuthError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<undefined, GoogleControllerGoogleAuthError, TData>(
    queryKeyFn({
      path: "/api/v1/google/sign-in-backend",
      operationId: "googleControllerGoogleAuth",
      variables,
    }),
    ({ signal }) =>
      fetchGoogleControllerGoogleAuth(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GoogleControllerAuthenticateError = Fetcher.ErrorWrapper<undefined>;

export type GoogleControllerAuthenticateVariables = {
  body: Schemas.GoogleVerificationDto;
} & AdminContext["fetcherOptions"];

export const fetchGoogleControllerAuthenticate = (
  variables: GoogleControllerAuthenticateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    undefined,
    GoogleControllerAuthenticateError,
    Schemas.GoogleVerificationDto,
    {},
    {},
    {}
  >({ url: "/api/v1/google/auth", method: "post", ...variables, signal });

export const useGoogleControllerAuthenticate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GoogleControllerAuthenticateError,
      GoogleControllerAuthenticateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    undefined,
    GoogleControllerAuthenticateError,
    GoogleControllerAuthenticateVariables
  >(
    (variables: GoogleControllerAuthenticateVariables) =>
      fetchGoogleControllerAuthenticate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AdminControllerFindMeError = Fetcher.ErrorWrapper<undefined>;

export type AdminControllerFindMeVariables = AdminContext["fetcherOptions"];

export const fetchAdminControllerFindMe = (
  variables: AdminControllerFindMeVariables,
  signal?: AbortSignal
) =>
  adminFetch<undefined, AdminControllerFindMeError, undefined, {}, {}, {}>({
    url: "/api/v1/admin/me",
    method: "get",
    ...variables,
    signal,
  });

export const useAdminControllerFindMe = <TData = undefined>(
  variables: AdminControllerFindMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, AdminControllerFindMeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<undefined, AdminControllerFindMeError, TData>(
    queryKeyFn({
      path: "/api/v1/admin/me",
      operationId: "adminControllerFindMe",
      variables,
    }),
    ({ signal }) =>
      fetchAdminControllerFindMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerCreateVariables = {
  body: Schemas.CreateCampaingDto;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerCreate = (
  variables: CampaignControllerCreateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerCreateError,
    Schemas.CreateCampaingDto,
    {},
    {},
    {}
  >({ url: "/api/v1/campaign", method: "post", ...variables, signal });

export const useCampaignControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CampaignDto,
      CampaignControllerCreateError,
      CampaignControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.CampaignDto,
    CampaignControllerCreateError,
    CampaignControllerCreateVariables
  >(
    (variables: CampaignControllerCreateVariables) =>
      fetchCampaignControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CampaignControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type CampaignControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.CampaignDto[];
};

export type CampaignControllerFindAllVariables = {
  queryParams?: CampaignControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerFindAll = (
  variables: CampaignControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    CampaignControllerFindAllResponse,
    CampaignControllerFindAllError,
    undefined,
    {},
    CampaignControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/campaign", method: "get", ...variables, signal });

export const useCampaignControllerFindAll = <
  TData = CampaignControllerFindAllResponse
>(
  variables: CampaignControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CampaignControllerFindAllResponse,
      CampaignControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    CampaignControllerFindAllResponse,
    CampaignControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign",
      operationId: "campaignControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignControllerFindOnePathParams = {
  id: string;
};

export type CampaignControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerFindOneVariables = {
  pathParams: CampaignControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerFindOne = (
  variables: CampaignControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerFindOneError,
    undefined,
    {},
    {},
    CampaignControllerFindOnePathParams
  >({ url: "/api/v1/campaign/{id}", method: "get", ...variables, signal });

export const useCampaignControllerFindOne = <TData = Schemas.CampaignDto>(
  variables: CampaignControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CampaignDto,
      CampaignControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.CampaignDto,
    CampaignControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign/{id}",
      operationId: "campaignControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignControllerUpdatePathParams = {
  id: string;
};

export type CampaignControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerUpdateVariables = {
  body: Schemas.UpdateCampaignDto;
  pathParams: CampaignControllerUpdatePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerUpdate = (
  variables: CampaignControllerUpdateVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    CampaignControllerUpdateError,
    Schemas.UpdateCampaignDto,
    {},
    {},
    CampaignControllerUpdatePathParams
  >({ url: "/api/v1/campaign/{id}", method: "patch", ...variables, signal });

export const useCampaignControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      CampaignControllerUpdateError,
      CampaignControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    CampaignControllerUpdateError,
    CampaignControllerUpdateVariables
  >(
    (variables: CampaignControllerUpdateVariables) =>
      fetchCampaignControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CampaignControllerRemovePathParams = {
  id: string;
};

export type CampaignControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerRemoveVariables = {
  pathParams: CampaignControllerRemovePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerRemove = (
  variables: CampaignControllerRemoveVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    CampaignControllerRemoveError,
    undefined,
    {},
    {},
    CampaignControllerRemovePathParams
  >({ url: "/api/v1/campaign/{id}", method: "delete", ...variables, signal });

export const useCampaignControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      CampaignControllerRemoveError,
      CampaignControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    CampaignControllerRemoveError,
    CampaignControllerRemoveVariables
  >(
    (variables: CampaignControllerRemoveVariables) =>
      fetchCampaignControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CampaignControllerPausePathParams = {
  id: string;
};

export type CampaignControllerPauseError = Fetcher.ErrorWrapper<undefined>;

export type CampaignControllerPauseVariables = {
  body: Schemas.CampaignStatusDto;
  pathParams: CampaignControllerPausePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignControllerPause = (
  variables: CampaignControllerPauseVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignDto,
    CampaignControllerPauseError,
    Schemas.CampaignStatusDto,
    {},
    {},
    CampaignControllerPausePathParams
  >({
    url: "/api/v1/campaign/change-status/{id}",
    method: "patch",
    ...variables,
    signal,
  });

export const useCampaignControllerPause = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CampaignDto,
      CampaignControllerPauseError,
      CampaignControllerPauseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.CampaignDto,
    CampaignControllerPauseError,
    CampaignControllerPauseVariables
  >(
    (variables: CampaignControllerPauseVariables) =>
      fetchCampaignControllerPause({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerUploadFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUploadFileRequestBody = {
  /**
   * @format binary
   */
  file: Blob;
  tags?: string[] | null;
};

export type FileControllerUploadFileVariables = {
  body: FileControllerUploadFileRequestBody;
} & AdminContext["fetcherOptions"];

export const fetchFileControllerUploadFile = (
  variables: FileControllerUploadFileVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.FileDto,
    FileControllerUploadFileError,
    FileControllerUploadFileRequestBody,
    {},
    {},
    {}
  >({ url: "/api/v1/file", method: "post", ...variables, signal });

export const useFileControllerUploadFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileDto,
      FileControllerUploadFileError,
      FileControllerUploadFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.FileDto,
    FileControllerUploadFileError,
    FileControllerUploadFileVariables
  >(
    (variables: FileControllerUploadFileVariables) =>
      fetchFileControllerUploadFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerUpdateFilePathParams = {
  id: string;
};

export type FileControllerUpdateFileError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerUpdateFileRequestBody = {
  /**
   * @format binary
   */
  file: Blob;
  tags?: string[] | null;
};

export type FileControllerUpdateFileVariables = {
  body: FileControllerUpdateFileRequestBody;
  pathParams: FileControllerUpdateFilePathParams;
} & AdminContext["fetcherOptions"];

export const fetchFileControllerUpdateFile = (
  variables: FileControllerUpdateFileVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.FileDto,
    FileControllerUpdateFileError,
    FileControllerUpdateFileRequestBody,
    {},
    {},
    FileControllerUpdateFilePathParams
  >({ url: "/api/v1/file/{id}", method: "patch", ...variables, signal });

export const useFileControllerUpdateFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileDto,
      FileControllerUpdateFileError,
      FileControllerUpdateFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    Schemas.FileDto,
    FileControllerUpdateFileError,
    FileControllerUpdateFileVariables
  >(
    (variables: FileControllerUpdateFileVariables) =>
      fetchFileControllerUpdateFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type FileControllerRemovePathParams = {
  id: string;
};

export type FileControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type FileControllerRemoveVariables = {
  pathParams: FileControllerRemovePathParams;
} & AdminContext["fetcherOptions"];

export const fetchFileControllerRemove = (
  variables: FileControllerRemoveVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    string,
    FileControllerRemoveError,
    undefined,
    {},
    {},
    FileControllerRemovePathParams
  >({ url: "/api/v1/file/{id}", method: "delete", ...variables, signal });

export const useFileControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      FileControllerRemoveError,
      FileControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useAdminContext();
  return reactQuery.useMutation<
    string,
    FileControllerRemoveError,
    FileControllerRemoveVariables
  >(
    (variables: FileControllerRemoveVariables) =>
      fetchFileControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChainControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type ChainControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ChainControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.ChainDto[];
};

export type ChainControllerFindAllVariables = {
  queryParams?: ChainControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchChainControllerFindAll = (
  variables: ChainControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    ChainControllerFindAllResponse,
    ChainControllerFindAllError,
    undefined,
    {},
    ChainControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/chain", method: "get", ...variables, signal });

export const useChainControllerFindAll = <
  TData = ChainControllerFindAllResponse
>(
  variables: ChainControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChainControllerFindAllResponse,
      ChainControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    ChainControllerFindAllResponse,
    ChainControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/chain",
      operationId: "chainControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchChainControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChainControllerFindOnePathParams = {
  id: string;
};

export type ChainControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ChainControllerFindOneVariables = {
  pathParams: ChainControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchChainControllerFindOne = (
  variables: ChainControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.ChainDto,
    ChainControllerFindOneError,
    undefined,
    {},
    {},
    ChainControllerFindOnePathParams
  >({ url: "/api/v1/chain/{id}", method: "get", ...variables, signal });

export const useChainControllerFindOne = <TData = Schemas.ChainDto>(
  variables: ChainControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ChainDto,
      ChainControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.ChainDto,
    ChainControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/chain/{id}",
      operationId: "chainControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchChainControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type NftTypeControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type NftTypeControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type NftTypeControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.NftTypeDto[];
};

export type NftTypeControllerFindAllVariables = {
  queryParams?: NftTypeControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchNftTypeControllerFindAll = (
  variables: NftTypeControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    NftTypeControllerFindAllResponse,
    NftTypeControllerFindAllError,
    undefined,
    {},
    NftTypeControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/nft-type", method: "get", ...variables, signal });

export const useNftTypeControllerFindAll = <
  TData = NftTypeControllerFindAllResponse
>(
  variables: NftTypeControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      NftTypeControllerFindAllResponse,
      NftTypeControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    NftTypeControllerFindAllResponse,
    NftTypeControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/nft-type",
      operationId: "nftTypeControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchNftTypeControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type NftTypeControllerFindOnePathParams = {
  id: string;
};

export type NftTypeControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type NftTypeControllerFindOneVariables = {
  pathParams: NftTypeControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchNftTypeControllerFindOne = (
  variables: NftTypeControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.NftTypeDto,
    NftTypeControllerFindOneError,
    undefined,
    {},
    {},
    NftTypeControllerFindOnePathParams
  >({ url: "/api/v1/nft-type/{id}", method: "get", ...variables, signal });

export const useNftTypeControllerFindOne = <TData = Schemas.NftTypeDto>(
  variables: NftTypeControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.NftTypeDto,
      NftTypeControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.NftTypeDto,
    NftTypeControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/nft-type/{id}",
      operationId: "nftTypeControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchNftTypeControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignTypeControllerFindAllQueryParams = {
  name?: string;
  offset?: number;
  limit?: number;
};

export type CampaignTypeControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export type CampaignTypeControllerFindAllResponse = {
  total: number;
  limit: number;
  offset: number;
  count: number;
  results: Schemas.CampaignTypeDto[];
};

export type CampaignTypeControllerFindAllVariables = {
  queryParams?: CampaignTypeControllerFindAllQueryParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignTypeControllerFindAll = (
  variables: CampaignTypeControllerFindAllVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    CampaignTypeControllerFindAllResponse,
    CampaignTypeControllerFindAllError,
    undefined,
    {},
    CampaignTypeControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/campaign-type", method: "get", ...variables, signal });

export const useCampaignTypeControllerFindAll = <
  TData = CampaignTypeControllerFindAllResponse
>(
  variables: CampaignTypeControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CampaignTypeControllerFindAllResponse,
      CampaignTypeControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    CampaignTypeControllerFindAllResponse,
    CampaignTypeControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign-type",
      operationId: "campaignTypeControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignTypeControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CampaignTypeControllerFindOnePathParams = {
  id: string;
};

export type CampaignTypeControllerFindOneError =
  Fetcher.ErrorWrapper<undefined>;

export type CampaignTypeControllerFindOneVariables = {
  pathParams: CampaignTypeControllerFindOnePathParams;
} & AdminContext["fetcherOptions"];

export const fetchCampaignTypeControllerFindOne = (
  variables: CampaignTypeControllerFindOneVariables,
  signal?: AbortSignal
) =>
  adminFetch<
    Schemas.CampaignTypeDto,
    CampaignTypeControllerFindOneError,
    undefined,
    {},
    {},
    CampaignTypeControllerFindOnePathParams
  >({ url: "/api/v1/campaign-type/{id}", method: "get", ...variables, signal });

export const useCampaignTypeControllerFindOne = <
  TData = Schemas.CampaignTypeDto
>(
  variables: CampaignTypeControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CampaignTypeDto,
      CampaignTypeControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useAdminContext(options);
  return reactQuery.useQuery<
    Schemas.CampaignTypeDto,
    CampaignTypeControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/campaign-type/{id}",
      operationId: "campaignTypeControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchCampaignTypeControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/api/v1/google/sign-in-backend";
      operationId: "googleControllerGoogleAuth";
      variables: GoogleControllerGoogleAuthVariables;
    }
  | {
      path: "/api/v1/admin/me";
      operationId: "adminControllerFindMe";
      variables: AdminControllerFindMeVariables;
    }
  | {
      path: "/api/v1/campaign";
      operationId: "campaignControllerFindAll";
      variables: CampaignControllerFindAllVariables;
    }
  | {
      path: "/api/v1/campaign/{id}";
      operationId: "campaignControllerFindOne";
      variables: CampaignControllerFindOneVariables;
    }
  | {
      path: "/api/v1/chain";
      operationId: "chainControllerFindAll";
      variables: ChainControllerFindAllVariables;
    }
  | {
      path: "/api/v1/chain/{id}";
      operationId: "chainControllerFindOne";
      variables: ChainControllerFindOneVariables;
    }
  | {
      path: "/api/v1/nft-type";
      operationId: "nftTypeControllerFindAll";
      variables: NftTypeControllerFindAllVariables;
    }
  | {
      path: "/api/v1/nft-type/{id}";
      operationId: "nftTypeControllerFindOne";
      variables: NftTypeControllerFindOneVariables;
    }
  | {
      path: "/api/v1/campaign-type";
      operationId: "campaignTypeControllerFindAll";
      variables: CampaignTypeControllerFindAllVariables;
    }
  | {
      path: "/api/v1/campaign-type/{id}";
      operationId: "campaignTypeControllerFindOne";
      variables: CampaignTypeControllerFindOneVariables;
    };
